#pragma once

#include <map>
#include <string>
#include <stdio.h>

#include "glad/glad.h"

#include "texture2D.h"
#include "shader.h"

enum
{
	CHAR_SPACE,
	CHAR_HAPPY_FACE_BLACK,
	CHAR_HAPPY_FACE_WHITE,
	CHAR_HEART,
	CHAR_DIAMOND,
	CHAR_CLOVER,
	CHAR_SPADE,
	CHAR_BULLET_WHITE,
	CHAR_BULLET_BLACK,
	CHAR_RING_WHITE,
	CHAR_RING_BLACK,
	CHAR_MALE,
	CHAR_FEMALE,
	CHAR_QUARTER_NOTE,
	CHAR_EIGHTH_NOTE,
	CHAR_SUN_1,
	CHAR_RIGHT_TRIANGLE,
	CHAR_LEFT_TRIANGLE,
	CHAR_DOUBLE_UP_ARROW,
	CHAR_DOUBLE_DOWN_EXCLAIM,
	CHAR_DOUBLE_UP_EXCLAIM,
	CHAR_DOWN_EXCLAIM,
	CHAR_UP_EXCLAIM,
	CHAR_PARAGRAPH,
	CHAR_SECTION,
	CHAR_RECTANGLE,
	CHAR_DOUBLE_UP_ARROW_UNSCORE,
	CHAR_UP_ARROW,
	CHAR_DOWN_ARROW,
	CHAR_RIGHT_ARROW,
	CHAR_LEFT_ARROW,
	CHAR_NEGATION,
	CHAR_DOUBLE_ARROW,
	CHAR_UP_TRIANGLE,
	CHAR_DOWN_TRIANGLE,
	CHAR_CURVED_DOWN_EXCLAIM,
	CHAR_CURVED_UP_EXCLAIM,
	CHAR_QUOTATION,
	CHAR_POUND,
	CHAR_DOLLAR,
	CHAR_PERCENT,
	CHAR_AND,
	CHAR_APOSTROPHE,
	CHAR_LEFT_PARATHESIS,
	CHAR_RIGHT_PARATHESIS,
	CHAR_STAR,
	CHAR_PLUS, 
	CHAR_COMMA,
	CHAR_MINUS,
	CHAR_PERIOD,
	CHAR_SLASH,
	CHAR_ZERO,
	CHAR_ONE,
	CHAR_TWO,
	CHAR_THREE,
	CHAR_FOUR,
	CHAR_FIVE,
	CHAR_SIX,
	CHAR_SEVEN,
	CHAR_EIGHT,
	CHAR_NINE,
	CHAR_COLON,
	CHAR_SEMICOLON,
	CHAR_LESS_THAN,
	CHAR_EQUAL,
	CHAR_GREATER_THAN,
	CHAR_QUESTION,
	CHAR_AT,
	CHAR_LEFT_BRACKET,
	CHAR_BACK_SLASH,
	CHAR_UPPER_A,
	CHAR_UPPER_B,
	CHAR_UPPER_C,
	CHAR_UPPER_D,
	CHAR_UPPER_E,
	CHAR_UPPER_F,
	CHAR_UPPER_G,
	CHAR_UPPER_H,
	CHAR_UPPER_I,
	CHAR_UPPER_J,
	CHAR_UPPER_K,
	CHAR_UPPER_L,
	CHAR_UPPER_M,
	CHAR_UPPER_N,
	CHAR_UPPER_O,
	CHAR_UPPER_P,
	CHAR_UPPER_Q,
	CHAR_UPPER_R,
	CHAR_UPPER_S,
	CHAR_UPPER_T,
	CHAR_UPPER_U,
	CHAR_UPPER_V,
	CHAR_UPPER_W,
	CHAR_UPPER_X,
	CHAR_UPPER_Y,
	CHAR_UPPER_Z,
	CHAR_BRACKET_RIGHT, 
	CHAR_CIRCUMFLEX,
	CHAR_UNDERSCORE,
	CHAR_GRAVE_ACCET,
	CHAR_CURLY_BRACKET_LEFT,
	CHAR_BAR,
	CHAR_CURLY_BRACKET_RIGHT,
	CHAR_TILDE,
	CHAR_A,
	CHAR_B,
	CHAR_C,
	CHAR_D,
	CHAR_E,
	CHAR_F,
	CHAR_G,
	CHAR_H,
	CHAR_I,
	CHAR_J,
	CHAR_K,
	CHAR_L,
	CHAR_M,
	CHAR_N,
	CHAR_O,
	CHAR_P,
	CHAR_Q,
	CHAR_R,
	CHAR_S,
	CHAR_T,
	CHAR_U,
	CHAR_V,
	CHAR_W,
	CHAR_X,
	CHAR_Y,
	CHAR_Z,
	CHAR_TECHINCAL,
	CHAR_DOWN_QUESTION,
	CHAR_UP_QUESTION,
	CHAR_CENT,
	CHAR_EURO,
	CHAR_YEN,
	CHAR_PESETA,
	CHAR_HOOK_F,
	CHAR_UPPER_CEDILLA,
	CHAR_DOT_U,
	CHAR_ACCENT_E,
	CHAR_ARROW_A,
	CHAR_DOT_A,
	CHAR_ACCENT_A,
	CHAR_HOLE_A,
	CHAR_CEDILLA,
	CHAR_ARROW_E,
	CHAR_DOT_E,
	CHAR_ACCENT_E_2,
	CHAR_DOT_I,
	CHAR_ARROW_I,
	CHAR_ACCENT_I,
	CHAR_UPPER_DOT_A,
	CHAR_UPPER_ARROW_A,
	CHAR_UPPER_ACCENT_E,
	CHAR_AE,
	CHAR_UPPER_AE,
	CHAR_ARROW_O,
	CHAR_DOT_O,
	CHAR_ACCENT_O,
	CHAR_ARROW_U,
	CHAR_ACCENT_U,
	CHAR_DOT_Y,
	CHAR_UPPER_DOT_O,
	CHAR_UPPER_DOT_U,
	CHAR_ACCENT_A_2,
	CHAR_ACCENT_I_2,
	CHAR_ACCENT_O_2,
	CHAR_ACCENT_U_2,
	CHAR_N_TILDE,
	CHAR_UPPER_N_TILDE,
	CHAR_ALPHA,
	CHAR_INDICATOR,
	CHAR_INDICATOR_2,
	CHAR_NEGATION_2,
	CHAR_NEGATION_3,
	CHAR_HALF,
	CHAR_QUARTER,
	CHAR_LEFT_ANGLE_QUOTES,
	CHAR_RIGHT_ANGLE_QUOTES,
	CHAR_BOX,
	CHAR_ESZETT,
	CHAR_GAMMA,
	CHAR_PI,
	CHAR_SUMMATION,
	CHAR_SIGMA,
	CHAR_MUSE,
	CHAR_TAU,
	CHAR_BLOCK_1,
	CHAR_BLOCK_2,
	CHAR_BLOCK_3,
	CHAR_BLOCK_4,
	CHAR_BAR_LINE_1,
	CHAR_BAR_LINE_2,
	CHAR_BAR_LINE_3,
	CHAR_BAR_LINE_4,
	CHAR_BAR_LINE_5,
	CHAR_BAR_LINE_6,
	CHAR_BAR_LINE_7,
	CHAR_BAR_LINE_8,
	CHAR_BAR_LINE_9,
	CHAR_BAR_LINE_10,
	CHAR_BAR_LINE_11,
	CHAR_BAR_LINE_12,
	CHAR_BAR_LINE_13,
	CHAR_BAR_LINE_14,
	CHAR_BAR_LINE_15,
	CHAR_BAR_LINE_16,
	CHAR_BAR_LINE_17,
	CHAR_BAR_LINE_18,
	CHAR_BAR_LINE_19,
	CHAR_BAR_LINE_20,
	CHAR_BAR_LINE_21,
	CHAR_BAR_LINE_22,
	CHAR_BAR_LINE_23,
	CHAR_BAR_LINE_24,
	CHAR_BAR_LINE_25,
	CHAR_BAR_LINE_26,
	CHAR_BAR_LINE_27,
	CHAR_BAR_LINE_28,
	CHAR_BAR_LINE_29,
	CHAR_BAR_LINE_30,
	CHAR_BAR_LINE_31,
	CHAR_BAR_LINE_32,
	CHAR_BAR_LINE_33,
	CHAR_BAR_LINE_34,
	CHAR_BAR_LINE_35,
	CHAR_BAR_LINE_36,
	CHAR_BAR_LINE_37,
	CHAR_BAR_LINE_38,
	CHAR_BAR_LINE_39,
	CHAR_BAR_LINE_40,
	CHAR_BAR_LINE_41,
	CHAR_BAR_LINE_42,
	CHAR_BOX_1,
	CHAR_BOX_2,
	CHAR_BOX_3,
	CHAR_BOX_4,
	CHAR_BOX_5,
	CHAR_BOX_6,
	CHAR_EQUIVALENT,
	CHAR_PLUS_MINUS,
	CHAR_GREATER_EQUAL,
	CHAR_LESSER_EQUAL,
	CHAR_PHI,
	CHAR_THETA,
	CHAR_OMEGA,
	CHAR_DELTA,
	CHAR_INFINITE,
	CHAR_PHI_2,
	CHAR_EPILSON,
	CHAR_INTERSECTION,
	CHAR_INTEGRAL,
	CHAR_INTEGRAL_2,
	CHAR_DIVIDE,
	CHAR_APPROX,
	CHAR_DEGREE,
	CHAR_DOT_2,
	CHAR_INTERPOINT,
	CHAR_SQUARE,
	CHAR_N_POWER,
	CHAR_SQUARED,
	NUM_CHAR_SET
	//34 x 8 = 272 - 9 = 263
};

const std::string char_set_names[NUM_CHAR_SET] =
{
	"char-space",
	"char-happy-face-black",
	"char-happy-face-white",
	"char-heart",
	"char-diamond",
	"char-clover",
	"char-spade",
	"char-bullet-white",
	"char-bullet-black",
	"char-ring-white",
	"char-ring-black",
	"char-male",
	"char-female",
	"char-quarter-note",
	"char-eighth-note",
	"char-sun-1",
	"char-right-triangle",
	"char-left-triangle",
	"char-double-up-arrow",
	"char-double-down-exclaim",
	"char-double-up-exclaim",
	"char-down-exclaim",
	"char-up-exclaim",
	"char-paragraph",
	"char-section",
	"char-rectangle",
	"char-double-up-arrow-unscore",
	"char-up-arrow",
	"char-down-arrow",
	"char-right-arrow",
	"char-left-arrow",
	"char-negation",
	"char-double-arrow",
	"char-up-triangle",
	"char-down-triangle",
	"char-curved-down-exclaim",
	"char-curved-up-exclaim",
	"char-quotation",
	"char-pound",
	"char-dollar",
	"char-percent",
	"char-and",
	"char-apostrophe",
	"char-left-parathesis",
	"char-right-parathesis",
	"char-star",
	"char-plus",
	"char-comma",
	"char-minus",
	"char-period",
	"char-slash",
	"char-zero",
	"char-one",
	"char-two",
	"char-three",
	"char-four",
	"char-five",
	"char-six",
	"char-seven",
	"char-eight",
	"char-nine",
	"char-colon",
	"char-semicolon",
	"char-less-than",
	"char-equal",
	"char-greater-than",
	"char-question",
	"char-at",
	"char-left-bracket",
	"char-back-slash",
	"char-upper-a",
	"char-upper-b",
	"char-upper-c",
	"char-upper-d",
	"char-upper-e",
	"char-upper-f",
	"char-upper-g",
	"char-upper-h",
	"char-upper-i",
	"char-upper-j",
	"char-upper-k",
	"char-upper-l",
	"char-upper-m",
	"char-upper-n",
	"char-upper-o",
	"char-upper-p",
	"char-upper-q",
	"char-upper-r",
	"char-upper-s",
	"char-upper-t",
	"char-upper-u",
	"char-upper-v",
	"char-upper-w",
	"char-upper-x",
	"char-upper-y",
	"char-upper-z",
	"char-bracket-right",
	"char-circumflex",
	"char-underscore",
	"char-grave-accet",
	"char-curly-bracket-left",
	"char-bar",
	"char-curly-bracket-right",
	"char-tilde",
	"char-a",
	"char-b",
	"char-c",
	"char-d",
	"char-e",
	"char-f",
	"char-g",
	"char-h",
	"char-i",
	"char-j",
	"char-k",
	"char-l",
	"char-m",
	"char-n",
	"char-o",
	"char-p",
	"char-q",
	"char-r",
	"char-s",
	"char-t",
	"char-u",
	"char-v",
	"char-w",
	"char-x",
	"char-y",
	"char-z",
	"char-techincal",
	"char-down-question",
	"char-up-question",
	"char-cent",
	"char-euro",
	"char-yen",
	"char-peseta",
	"char-hook-f",
	"char-upper-cedilla",
	"char-dot-u",
	"char-accent-e",
	"char-arrow-a",
	"char-dot-a",
	"char-accent-a",
	"char-hole-a",
	"char-cedilla",
	"char-arrow-e",
	"char-dot-e",
	"char-accent-e-2",
	"char-dot-i",
	"char-arrow-i",
	"char-accent-i",
	"char-upper-dot-a",
	"char-upper-arrow-a",
	"char-upper-accent-e",
	"char-ae",
	"char-upper-ae",
	"char-arrow-o",
	"char-dot-o",
	"char-accent-o",
	"char-arrow-u",
	"char-accent-u",
	"char-dot-y",
	"char-upper-dot-o",
	"char-upper-dot-u",
	"char-accent-a-2",
	"char-accent-i-2",
	"char-accent-o-2",
	"char-accent-u-2",
	"char-n-tilde",
	"char-upper-n-tilde",
	"char-alpha",
	"char-indicator",
	"char-indicator-2",
	"char-negation-2",
	"char-negation-3",
	"char-half",
	"char-quarter",
	"char-left-angle-quotes",
	"char-right-angle-quotes",
	"char-box",
	"char-eszett",
	"char-gamma",
	"char-pi",
	"char-summation",
	"char-sigma",
	"char-muse",
	"char-tau",
	"char-block-1",
	"char-block-2",
	"char-block-3",
	"char-block-4",
	"char-bar-line-1",
	"char-bar-line-2",
	"char-bar-line-3",
	"char-bar-line-4",
	"char-bar-line-5",
	"char-bar-line-6",
	"char-bar-line-7",
	"char-bar-line-8",
	"char-bar-line-9",
	"char-bar-line-10",
	"char-bar-line-11",
	"char-bar-line-12",
	"char-bar-line-13",
	"char-bar-line-14",
	"char-bar-line-15",
	"char-bar-line-16",
	"char-bar-line-17",
	"char-bar-line-18",
	"char-bar-line-19",
	"char-bar-line-20",
	"char-bar-line-21",
	"char-bar-line-22",
	"char-bar-line-23",
	"char-bar-line-24",
	"char-bar-line-25",
	"char-bar-line-26",
	"char-bar-line-27",
	"char-bar-line-28",
	"char-bar-line-29",
	"char-bar-line-30",
	"char-bar-line-31",
	"char-bar-line-32",
	"char-bar-line-33",
	"char-bar-line-34",
	"char-bar-line-35",
	"char-bar-line-36",
	"char-bar-line-37",
	"char-bar-line-38",
	"char-bar-line-39",
	"char-bar-line-40",
	"char-bar-line-41",
	"char-bar-line-42",
	"char-box-1",
	"char-box-2",
	"char-box-3",
	"char-box-4",
	"char-box-5",
	"char-box-6",
	"char-equivalent",
	"char-plus-minus",
	"char-greater-equal",
	"char-lesser-equal",
	"char-phi",
	"char-theta",
	"char-omega",
	"char-delta",
	"char-infinite",
	"char-phi-2",
	"char-epilson",
	"char-intersection",
	"char-integral",
	"char-integral-2",
	"char-divide",
	"char-approx",
	"char-degree",
	"char-dot-2",
	"char-interpoint",
	"char-square",
	"char-n-power",
	"char-squared"
};

const std::string char_set_extension = ".png";

const int CELL_WIDTH = 25;
const int CELL_HEIGHT = 48;

//A static singleton resourcemanger to load shaders and textures
class ResourceManager
{
public:
	//Resource storage
	static std::map<std::string, Shader> shaders;
	static std::map<std::string, Texture2D> textures;
	static std::map<int, Texture2D> chars;

	static Shader& loadShader(const GLchar* vShaderFile, const GLchar *fShaderFile, const GLchar *gShaderFile, std::string name);
	static Shader& getShader(std::string name);

	static Texture2D& loadTexture(const GLchar* file, std::string name);
	static Texture2D& getTexture(std::string name);

	static void loadCharset();
	static Texture2D& getChar(const int code, const bool is_ascii = false);
	static int charToCharset(const char code);

	//deallocate all resources
	static void clear();
private:
	//Prevent objects
	ResourceManager() {}

	static Shader loadShaderFromFile(const GLchar * vShaderFile, const GLchar *fShaderFile, const GLchar *gShaderFile = nullptr);
	static Texture2D loadTextureFromFile(const GLchar *file);
};

